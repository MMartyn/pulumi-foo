# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NestedObject',
]

@pulumi.output_type
class NestedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reqProp":
            suggest = "req_prop"
        elif key == "optProp":
            suggest = "opt_prop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NestedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NestedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NestedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 req_prop: str,
                 opt_prop: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "req_prop", req_prop)
        if opt_prop is not None:
            pulumi.set(__self__, "opt_prop", opt_prop)

    @property
    @pulumi.getter(name="reqProp")
    def req_prop(self) -> str:
        return pulumi.get(self, "req_prop")

    @property
    @pulumi.getter(name="optProp")
    def opt_prop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "opt_prop")


