// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bar

import (
	"context"
	"reflect"

	"github.com/mmartyn/pulumi-foo/sdk/go/foo/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type NestedObject struct {
	OptProp []string `pulumi:"optProp"`
	ReqProp string   `pulumi:"reqProp"`
}

// NestedObjectInput is an input type that accepts NestedObjectArgs and NestedObjectOutput values.
// You can construct a concrete instance of `NestedObjectInput` via:
//
//	NestedObjectArgs{...}
type NestedObjectInput interface {
	pulumi.Input

	ToNestedObjectOutput() NestedObjectOutput
	ToNestedObjectOutputWithContext(context.Context) NestedObjectOutput
}

type NestedObjectArgs struct {
	OptProp pulumi.StringArrayInput `pulumi:"optProp"`
	ReqProp pulumi.StringInput      `pulumi:"reqProp"`
}

func (NestedObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NestedObject)(nil)).Elem()
}

func (i NestedObjectArgs) ToNestedObjectOutput() NestedObjectOutput {
	return i.ToNestedObjectOutputWithContext(context.Background())
}

func (i NestedObjectArgs) ToNestedObjectOutputWithContext(ctx context.Context) NestedObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NestedObjectOutput)
}

// NestedObjectArrayInput is an input type that accepts NestedObjectArray and NestedObjectArrayOutput values.
// You can construct a concrete instance of `NestedObjectArrayInput` via:
//
//	NestedObjectArray{ NestedObjectArgs{...} }
type NestedObjectArrayInput interface {
	pulumi.Input

	ToNestedObjectArrayOutput() NestedObjectArrayOutput
	ToNestedObjectArrayOutputWithContext(context.Context) NestedObjectArrayOutput
}

type NestedObjectArray []NestedObjectInput

func (NestedObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NestedObject)(nil)).Elem()
}

func (i NestedObjectArray) ToNestedObjectArrayOutput() NestedObjectArrayOutput {
	return i.ToNestedObjectArrayOutputWithContext(context.Background())
}

func (i NestedObjectArray) ToNestedObjectArrayOutputWithContext(ctx context.Context) NestedObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NestedObjectArrayOutput)
}

type NestedObjectOutput struct{ *pulumi.OutputState }

func (NestedObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NestedObject)(nil)).Elem()
}

func (o NestedObjectOutput) ToNestedObjectOutput() NestedObjectOutput {
	return o
}

func (o NestedObjectOutput) ToNestedObjectOutputWithContext(ctx context.Context) NestedObjectOutput {
	return o
}

func (o NestedObjectOutput) OptProp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NestedObject) []string { return v.OptProp }).(pulumi.StringArrayOutput)
}

func (o NestedObjectOutput) ReqProp() pulumi.StringOutput {
	return o.ApplyT(func(v NestedObject) string { return v.ReqProp }).(pulumi.StringOutput)
}

type NestedObjectArrayOutput struct{ *pulumi.OutputState }

func (NestedObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NestedObject)(nil)).Elem()
}

func (o NestedObjectArrayOutput) ToNestedObjectArrayOutput() NestedObjectArrayOutput {
	return o
}

func (o NestedObjectArrayOutput) ToNestedObjectArrayOutputWithContext(ctx context.Context) NestedObjectArrayOutput {
	return o
}

func (o NestedObjectArrayOutput) Index(i pulumi.IntInput) NestedObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NestedObject {
		return vs[0].([]NestedObject)[vs[1].(int)]
	}).(NestedObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NestedObjectInput)(nil)).Elem(), NestedObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NestedObjectArrayInput)(nil)).Elem(), NestedObjectArray{})
	pulumi.RegisterOutputType(NestedObjectOutput{})
	pulumi.RegisterOutputType(NestedObjectArrayOutput{})
}
